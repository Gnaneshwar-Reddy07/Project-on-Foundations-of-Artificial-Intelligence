import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import joblib

df = pd.read_csv('fake_and_real_news.csv')

print("First 5 rows:\n", df.head())
print("\nMissing values in each column:\n", df.isnull().sum())
print("\nLabel distribution:\n", df['label'].value_counts())
print("\n")
sns.countplot(data=df, x='label')
plt.title('Distribution of Fake and Real News')
plt.xlabel('News Type')
plt.ylabel('Count')
plt.show()

X = df['Text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
print("\nTraining samples:", X_train.shape[0])
print("Testing samples:", X_test.shape[0])

vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7, min_df=5, ngram_range=(1, 2))
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

model = RandomForestClassifier(n_estimators=200, max_depth=100, random_state=42)
model.fit(X_train_tfidf, y_train)

y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)
print("\nModel Accuracy:", round(accuracy * 100, 2), "%")

cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:\n", cm)
print("\n")

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print("\nClassification Report:\n", classification_report(y_test, y_pred))

joblib.dump(model, 'fake_news_rf_model.pkl')
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')

loaded_model = joblib.load('fake_news_rf_model.pkl')
loaded_vectorizer = joblib.load('tfidf_vectorizer.pkl')

sample = [input("\nEnter a news headline or article to classify as FAKE or REAL:\n")]
sample_vectorized = loaded_vectorizer.transform(sample)
print("\nSample Prediction:", loaded_model.predict(sample_vectorized)[0])
